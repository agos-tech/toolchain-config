---
trigger:
  - master

variables:
  NPM_CONFIG_REGISTRY: https://pkgs.dev.azure.com/agos-labs/_packaging/agos-labs/npm/registry/
  NPM_CONFIG_USERCONFIG: $(Pipeline.Workspace)/.npmrc
  PIP_INDEX_URL: https://pkgs.dev.azure.com/agos-labs/_packaging/agos-labs/pypi/simple/
  PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache

stages:
  - stage: QualityAssurance
    displayName: Quality Assurance
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: Validate
        displayName: Validate toolchain conformity
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.7"
              addToPath: true
          - script:
              echo "##vso[task.setvariable variable=PYTHON_FULL_VERSION]$(python
              --version --version)"
            displayName: Define Python version

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: agos-labs
            displayName: Authenticate pip for Azure Artifacts

          - script: pip install -r build-requirements.txt
            displayName: Install build requirements

          - task: Cache@2
            inputs:
              key:
                pre-commit | "$(Agent.OS)" | .pre-commit-config.yaml |
                "$(PYTHON_FULL_VERSION)"
              restoreKeys: |
                pre-commit | "$(Agent.OS)" | .pre-commit-config.yaml
                pre-commit | "$(Agent.OS)"
                pre-commit
              path: $(PRE_COMMIT_HOME)
            displayName: Cache pre-commit hooks
          - script: pre-commit run --all-files
            displayName: Run pre-commit hooks

      - job: ValidateCommitMessages
        displayName: Validate commit messages
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
          - script:
              echo "##vso[task.setvariable variable=NODE_VERSION]$(node
              --version)"
            displayName: Define Node.js version

          - script: |
              echo "registry=$(NPM_CONFIG_REGISTRY)" > $(NPM_CONFIG_USERCONFIG)
              echo "always-auth=true" >> $(NPM_CONFIG_USERCONFIG)
            displayName: Configure npm for Azure Artifacts
          - task: npmAuthenticate@0
            inputs:
              workingFile: $(NPM_CONFIG_USERCONFIG)
            displayName: Authenticate npm for Azure Artifacts

          - task: Cache@2
            inputs:
              key: yarn | "$(Agent.OS)" | yarn.lock | "$(NODE_VERSION)"
              restoreKeys: |
                yarn | "$(Agent.OS)" | yarn.lock
                yarn | "$(Agent.OS)"
              path: node_modules
            displayName: Cache JavaScript dependencies
          - script: yarn install --frozen-lockfile --production=false
            displayName: Install JavaScript requirements

          - script: npx --no-install commitlint --from=origin/master
            displayName: Lint commit messages since master

  - stage: Release
    pool:
      vmImage: ubuntu-16.04
    condition:
      and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    jobs:
      - job: Version
        displayName: Commit new version
        variables:
          GIT_EMAIL: "release-manager@agos-tech.com"
          GIT_AUTHOR: AgOS release
          GNUPGHOME: $(Pipeline.Workspace)/gnupg
          GPG_KEY_ID: FD2954C5A4E9AD33B99B8AD8D6DF54936E67C856
          GPG_PROXY_BIN: $(Agent.TempDirectory)/gpg-proxy
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              mkdir $(GNUPGHOME)
              echo allow-loopback-pinentry > $(GNUPGHOME)/gpg-agent.conf
            displayName: Configure GPG agent
          - script: |
              sudo apt-get install gnupg2
              sudo mv /usr/bin/gpg /usr/bin/gpg1
              sudo update-alternatives --verbose --install /usr/bin/gpg gnupg /usr/bin/gpg2 50
            displayName: Install GnuPG v2 (as default GPG program)

          - script: |
              echo "##vso[task.setvariable variable=GIT_AUTHOR_NAME]$(GIT_AUTHOR)"
              echo "##vso[task.setvariable variable=GIT_AUTHOR_EMAIL]$(GIT_EMAIL)"
              echo "##vso[task.setvariable variable=GIT_COMMITTER_NAME]$(GIT_AUTHOR)"
              echo "##vso[task.setvariable variable=GIT_COMMITTER_EMAIL]$(GIT_EMAIL)"
            displayName: Set all Git crendentials

          - task: DownloadSecureFile@1
            inputs:
              secureFile: release-manager-private-keys.gpg
            name: keyring
            displayName: Download private GPG key
          - script: gpg --batch --yes --import $(keyring.secureFilePath)
            displayName: Import private GPG keys
          - script:
              echo 'gpg --batch --no-tty --pinentry-mode loopback --passphrase
              $(GPG_PASSPHRASE) "$@"' > $(GPG_PROXY_BIN) && chmod +x
              $(GPG_PROXY_BIN)
            displayName: Create a proxy able to use the GPG keys
          - script: |
              git config commit.gpgSign true
              git config gpg.program $(GPG_PROXY_BIN)
              git config user.signingKey $(GPG_KEY_ID)
            displayName: Configure Git to sign commits with GPG

          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
          - script:
              echo "##vso[task.setvariable variable=NODE_VERSION]$(node
              --version)"
            displayName: Define Node.js version

          - script: |
              echo "registry=$(NPM_CONFIG_REGISTRY)" > $(NPM_CONFIG_USERCONFIG)
              echo "always-auth=true" >> $(NPM_CONFIG_USERCONFIG)
            displayName: Configure npm for Azure Artifacts
          - task: npmAuthenticate@0
            inputs:
              workingFile: $(NPM_CONFIG_USERCONFIG)
            displayName: Authenticate npm for Azure Artifacts

          - task: Cache@2
            inputs:
              key: yarn | "$(Agent.OS)" | yarn.lock | "$(NODE_VERSION)"
              restoreKeys: |
                yarn | "$(Agent.OS)" | yarn.lock
                yarn | "$(Agent.OS)"
              path: node_modules
            displayName: Cache JavaScript dependencies
          - script: yarn install --frozen-lockfile --production=false
            displayName: Install JavaScript requirements

          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.7"
              addToPath: true
          - script:
              echo "##vso[task.setvariable variable=PYTHON_FULL_VERSION]$(python
              --version --version)"
            displayName: Define Python version

          - task: PipAuthenticate@1
            inputs:
              artifactFeeds: agos-labs
            displayName: Authenticate pip for Azure Artifacts

          - script: pip install -r build-requirements.txt
            displayName: Install build requirements

          - task: Cache@2
            inputs:
              key:
                pre-commit | "$(Agent.OS)" | .pre-commit-config.yaml |
                "$(PYTHON_FULL_VERSION)"
              restoreKeys: |
                pre-commit | "$(Agent.OS)" | .pre-commit-config.yaml
                pre-commit | "$(Agent.OS)"
                pre-commit
              path: $(PRE_COMMIT_HOME)
            displayName: Cache pre-commit hooks
          - script: pre-commit install
            displayName: Install pre-commit hooks

          - script: npx --no-install semantic-release
            displayName: Release semantically

      - job: PushToGitHub
        displayName: Push to GitHub
        dependsOn: Version
        variables:
          GITHUB_URL: github.com/agos-tech/toolchain-config
          GITHUB_USERNAME: agos-release-manager
        steps:
          - checkout: self
            persistCredentials: true
          - script: git fetch origin $(Build.sourceBranch)
            displayName: Force fetch the source branch

          - script:
              git push
              "https://$(GITHUB_USERNAME):$(GITHUB_TOKEN)@$(GITHUB_URL)"
              FETCH_HEAD:$(Build.sourceBranch) --tags
            displayName: Push the source branch and tags
