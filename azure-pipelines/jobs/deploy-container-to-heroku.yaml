---
parameters:
  - name: DEPLOYMENT_TARGET
    type: string
  - name: DOCKER_REGISTRY
    type: string
  - name: DOCKER_SERVICE_CONNECTION
    type: string
  - name: HEROKU_APP
    type: string
  - name: HEROKU_PROC_TYPE
    type: string
    default: web
  - name: HEROKU_ENV_FILE
    type: string
  - name: HEROKU_RESET_DB
    type: boolean
    default: false
  - name: HEROKU_ROLLING_DEPLOY
    type: boolean
    default: true
  - name: IMAGE_NAME
    type: string
  - name: IMAGE_TAG
    type: string
  - name: RELEASE_LABEL
    type: string
  - name: SENTRY_ORG
    type: string
  - name: SENTRY_PROJECT
    type: string
  - name: extraMaintenanceSteps
    type: stepList
    default: []

jobs:
  - job: DeployContainerToHeroku
    displayName: Deploy container to Heroku
    variables:
      QUALIFIED_CONTAINER_IMAGE:
        ${{ parameters.DOCKER_REGISTRY}}/${{ parameters.IMAGE_NAME }}:${{
        parameters.IMAGE_TAG }}
      HEROKU_APP: ${{ parameters.HEROKU_APP }}
    steps:
      - template: ../steps/yarn-dependencies.yaml

      - task: Docker@2
        displayName: Login Docker registry
        inputs:
          command: login
          containerRegistry: ${{ parameters.DOCKER_SERVICE_CONNECTION }}

      - script: docker pull $(QUALIFIED_CONTAINER_IMAGE)
        displayName: Pull Docker image

      - script: |
          docker tag $(QUALIFIED_CONTAINER_IMAGE) registry.heroku.com/${{ parameters.HEROKU_APP }}/${{ parameters.HEROKU_PROC_TYPE }}
        displayName: Tag Docker image

      - script:
          npx --no-install sentry-cli releases --org ${{ parameters.SENTRY_ORG
          }} new --project ${{ parameters.SENTRY_PROJECT }} "${{
          parameters.RELEASE_LABEL }}"
        displayName: Create Sentry release
        env:
          SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)

      - script:
          npx --no-install sentry-cli releases --org ${{ parameters.SENTRY_ORG
          }} set-commits --auto "${{ parameters.RELEASE_LABEL }}"
        displayName: Associate commits to Sentry release
        env:
          SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)

      - script:
          echo "##vso[task.setvariable
          variable=HEROKU_APP_ORIGINAL_RELEASE]$(heroku releases --json -n1 | jq
          '.[0].version')"
        displayName: Retrieve current Heroku release
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script:
          echo "##vso[task.setvariable
          variable=HEROKU_ORIGINAL_DATABASE]$(heroku pg:info | grep -Eo
          'HEROKU_POSTGRESQL_[A-Z_]+' | cut -d_ -f1-3)"
        displayName: Retrieve current database name (empty if not supported)
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: |
          heroku container:login
          docker push registry.heroku.com/${{ parameters.HEROKU_APP }}/${{ parameters.HEROKU_PROC_TYPE }}
        displayName: Push Docker image to Heroku
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: heroku maintenance:on
        displayName: Enter maintenance mode
        condition:
          and(succeeded(), eq('${{ parameters.HEROKU_ROLLING_DEPLOY }}', false))
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script:
          echo "##vso[task.setvariable variable=ENTERED_MAINTENANCE_AT]$(date
          --rfc-3339=seconds --utc)"
        displayName: Remember when we entered maintenance mode
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: heroku dyno:scale ${{ parameters.HEROKU_PROC_TYPE }}=0
        displayName: Scale down Heroku dyno
        condition:
          and(succeeded(), eq('${{ parameters.HEROKU_ROLLING_DEPLOY }}', false))
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: heroku pg:reset DATABASE --confirm ${{ parameters.HEROKU_APP }}
        displayName: Reset Heroku's database
        condition:
          and(succeeded(), eq('${{ parameters.HEROKU_RESET_DB }}', true))
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: heroku config:set $(cat ${{ parameters.HEROKU_ENV_FILE }})
        displayName: Set Heroku (static) config
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: heroku config:set SENTRY_RELEASE=${{ parameters.RELEASE_LABEL }}
        displayName: Set Heroku (runtime) config
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: |
          heroku container:login
          heroku container:release ${{ parameters.HEROKU_PROC_TYPE }}
        displayName: "Trigger a new Heroku release"
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - ${{ each step in parameters.extraMaintenanceSteps }}:
          - ${{ each pair in step }}:
              ${{ pair.key }}: ${{ pair.value }}

      - script: heroku releases:rollback $(HEROKU_APP_ORIGINAL_RELEASE)
        displayName: Rollback Heroku to original release
        condition: failed()
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: |
          heroku addons:create heroku-postgresql:standard-0 --rollback $(HEROKU_ORIGINAL_DATABASE) --to '$(ENTERED_MAINTENANCE_AT)'
          heroku pg:wait
          ROLLBACK_DATABASE=$(heroku pg:info | grep -Eo 'HEROKU_POSTGRESQL_[A-Z_]+' | grep -Fv "$(HEROKU_ORIGINAL_DATABASE)" | cut -d_ -f1-3)
          heroku pg:promote "${ROLLBACK_DATABASE}"
        displayName: Rollback database to before the deployment
        condition: and(failed(), ne(variables.HEROKU_ORIGINAL_DATABASE, ''))
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script: heroku dyno:scale ${{ parameters.HEROKU_PROC_TYPE }}=1
        displayName: Scale up Heroku dyno
        condition:
          or(and(succeeded(), eq('${{ parameters.HEROKU_ROLLING_DEPLOY }}',
          false)), failed())
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)
      - script: heroku maintenance:off
        displayName: Leave maintenance mode
        condition:
          or(and(succeeded(), eq('${{ parameters.HEROKU_ROLLING_DEPLOY }}',
          false)), failed())
        env:
          HEROKU_API_KEY: $(HEROKU_TOKEN)

      - script:
          npx --no-install sentry-cli releases --org ${{ parameters.SENTRY_ORG
          }} finalize "${{ parameters.RELEASE_LABEL }}"
        displayName: Finalize Sentry release
        env:
          SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)

      - script:
          npx --no-install sentry-cli releases --org ${{ parameters.SENTRY_ORG
          }} deploys "${{ parameters.RELEASE_LABEL }}" new --env ${{
          parameters.DEPLOYMENT_TARGET }}
        displayName: Update Sentry deployment target
        env:
          SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)
